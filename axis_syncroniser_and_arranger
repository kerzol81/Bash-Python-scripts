#!/bin/bash
# syncronising and arranging files from an AXIS video server
# invoke the script with cron

AXIS_IP=$1
AXIS_PORT='21'
USER=$2
PASS=$3
LOCAL_FOLDER="$HOME/axis"
TO_FOLDER="$HOME/axis_arranged"						# the folder where the files will be arranged
MAX='99'											# HDD max, reacing it the script exits
EXTENSION='mkv'										# the video file extensions

function check_args(){

		if [ "$#" -eq 0 ]; then
    		echo '[-] Pass args to the scipt!'
			usage
			exit 1
		fi
}

function usage(){
	readonly PROGNAME=`basename $0`

	cat <<- EOF
	
	usage:
	--------------------------------------------
	./$PROGNAME <IP> <USERNAME> <PASSWORD>
	--------------------------------------------
		
	crontab -e and append one of these examples:
	
	run it in every minute:
	
	*/1 * * * *  /path/to/script/$PROGNAME <IP> <USERNAME> <PASSWORD>
	
	run it in every 30 minutes from 20:00 until 04:00 o' clock:
	
	*/30 20-23,0-4 * * * /path/to/script/$PROGNAME <IP> <USERNAME> <PASSWORD>

	EOF
}

function check_instances(){

		if [ "$(pgrep -x $(basename $0))" != "$$" ]; then
			echo '[-] only one instance is allowed at a time'
			exit 2
		fi
}

function check_hdd(){
  	
  	local SPACE=$(df -h | tr -d "%" | awk '/sda/ { print $5 }')
  	local INT='^[0-9]+$'
	
	if ! [[ $SPACE =~ $INT ]] ; then
   		echo "[-] something went wrong while figuring out disk space"
   		exit 3
	fi
	
	if [ "$SPACE" -ge $MAX ];then
		exit 4
	fi
}

function check_axis(){
	
	if ! ping -c 1 "$AXIS_IP";then
		echo "[-] The axis server is not available..."
		exit 4
	fi
	
}

function syncronise(){
	
	local AXIS_SD='/var/spool/storage/SD_DISK'	# remote folder on Axis, where the video files are stored
		
	if [ ! -d "$LOCAL_FOLDER" ];then
		mkdir -p "$LOCAL_FOLDER"
	fi
	
	wget -m --timeout=10 --tries=3 --user=$USER --password=$PASS ftp://$AXIS_IP:$AXIS_PORT/$AXIS_SD --directory-prefix=$LOCAL_FOLDER --reject "*.xml, *.db"
}

function arrange(){
	check_hdd
	for i in $(find "$LOCAL_FOLDER" -type f -name *."$EXTENSION"); do

		NEW_FOLDER=$(echo "$i" | grep -Eo '[0-9]{8}' | sort | uniq)

		if [ ! -d "/$TO_FOLDER/$NEW_FOLDER" ]; then
			mkdir -p /"$TO_FOLDER"/"$NEW_FOLDER"
		fi
		
		rsync -vah --progress "$i" /"$TO_FOLDER"/"$NEW_FOLDER"/
	done
}

function remove(){
		rm -rf "$LOCAL_FOLDER"
}

function main(){
	check_args "$@"
	check_instances	
	check_hdd	
	check_axis
	syncronise
	arrange
	#remove
}

main "$@"
